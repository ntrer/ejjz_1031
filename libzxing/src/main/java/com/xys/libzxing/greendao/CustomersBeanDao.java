package com.xys.libzxing.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xys.libzxing.zxing.Bean.CustomersBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMERS_BEAN".
*/
public class CustomersBeanDao extends AbstractDao<CustomersBean, Long> {

    public static final String TABLENAME = "CUSTOMERS_BEAN";

    /**
     * Properties of entity CustomersBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckCode = new Property(1, String.class, "checkCode", false, "CHECK_CODE");
        public final static Property Chuangjianren = new Property(2, String.class, "chuangjianren", false, "CHUANGJIANREN");
        public final static Property Cjsj = new Property(3, long.class, "cjsj", false, "CJSJ");
        public final static Property CustomerCode = new Property(4, int.class, "customerCode", false, "CUSTOMER_CODE");
        public final static Property CustomerId = new Property(5, String.class, "customerId", false, "CUSTOMER_ID");
        public final static Property CustomerMobile = new Property(6, String.class, "customerMobile", false, "CUSTOMER_MOBILE");
        public final static Property CustomerName = new Property(7, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property Del = new Property(8, String.class, "del", false, "DEL");
        public final static Property Xgsj = new Property(9, long.class, "xgsj", false, "XGSJ");
        public final static Property Xiugairen = new Property(10, String.class, "xiugairen", false, "XIUGAIREN");
    }


    public CustomersBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CustomersBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMERS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECK_CODE\" TEXT," + // 1: checkCode
                "\"CHUANGJIANREN\" TEXT," + // 2: chuangjianren
                "\"CJSJ\" INTEGER NOT NULL ," + // 3: cjsj
                "\"CUSTOMER_CODE\" INTEGER NOT NULL ," + // 4: customerCode
                "\"CUSTOMER_ID\" TEXT," + // 5: customerId
                "\"CUSTOMER_MOBILE\" TEXT," + // 6: customerMobile
                "\"CUSTOMER_NAME\" TEXT," + // 7: customerName
                "\"DEL\" TEXT," + // 8: del
                "\"XGSJ\" INTEGER NOT NULL ," + // 9: xgsj
                "\"XIUGAIREN\" TEXT);"); // 10: xiugairen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMERS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomersBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checkCode = entity.getCheckCode();
        if (checkCode != null) {
            stmt.bindString(2, checkCode);
        }
 
        String chuangjianren = entity.getChuangjianren();
        if (chuangjianren != null) {
            stmt.bindString(3, chuangjianren);
        }
        stmt.bindLong(4, entity.getCjsj());
        stmt.bindLong(5, entity.getCustomerCode());
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(6, customerId);
        }
 
        String customerMobile = entity.getCustomerMobile();
        if (customerMobile != null) {
            stmt.bindString(7, customerMobile);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(8, customerName);
        }
 
        String del = entity.getDel();
        if (del != null) {
            stmt.bindString(9, del);
        }
        stmt.bindLong(10, entity.getXgsj());
 
        String xiugairen = entity.getXiugairen();
        if (xiugairen != null) {
            stmt.bindString(11, xiugairen);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomersBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checkCode = entity.getCheckCode();
        if (checkCode != null) {
            stmt.bindString(2, checkCode);
        }
 
        String chuangjianren = entity.getChuangjianren();
        if (chuangjianren != null) {
            stmt.bindString(3, chuangjianren);
        }
        stmt.bindLong(4, entity.getCjsj());
        stmt.bindLong(5, entity.getCustomerCode());
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(6, customerId);
        }
 
        String customerMobile = entity.getCustomerMobile();
        if (customerMobile != null) {
            stmt.bindString(7, customerMobile);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(8, customerName);
        }
 
        String del = entity.getDel();
        if (del != null) {
            stmt.bindString(9, del);
        }
        stmt.bindLong(10, entity.getXgsj());
 
        String xiugairen = entity.getXiugairen();
        if (xiugairen != null) {
            stmt.bindString(11, xiugairen);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomersBean readEntity(Cursor cursor, int offset) {
        CustomersBean entity = new CustomersBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // checkCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chuangjianren
            cursor.getLong(offset + 3), // cjsj
            cursor.getInt(offset + 4), // customerCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // customerId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // customerMobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // customerName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // del
            cursor.getLong(offset + 9), // xgsj
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // xiugairen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomersBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChuangjianren(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCjsj(cursor.getLong(offset + 3));
        entity.setCustomerCode(cursor.getInt(offset + 4));
        entity.setCustomerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCustomerMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCustomerName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXgsj(cursor.getLong(offset + 9));
        entity.setXiugairen(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomersBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomersBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomersBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
