package com.xys.libzxing.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xys.libzxing.zxing.Bean.ActivityBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITY_BEAN".
*/
public class ActivityBeanDao extends AbstractDao<ActivityBean, Long> {

    public static final String TABLENAME = "ACTIVITY_BEAN";

    /**
     * Properties of entity ActivityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Active = new Property(1, String.class, "active", false, "ACTIVE");
        public final static Property ActivityCode = new Property(2, int.class, "activityCode", false, "ACTIVITY_CODE");
        public final static Property ActivityId = new Property(3, String.class, "activityId", false, "ACTIVITY_ID");
        public final static Property ActivityName = new Property(4, String.class, "activityName", false, "ACTIVITY_NAME");
        public final static Property Chuangjianren = new Property(5, String.class, "chuangjianren", false, "CHUANGJIANREN");
        public final static Property Cjsj = new Property(6, long.class, "cjsj", false, "CJSJ");
        public final static Property CoverImageId = new Property(7, String.class, "coverImageId", false, "COVER_IMAGE_ID");
        public final static Property Del = new Property(8, String.class, "del", false, "DEL");
        public final static Property EventEnd = new Property(9, long.class, "eventEnd", false, "EVENT_END");
        public final static Property EventStart = new Property(10, long.class, "eventStart", false, "EVENT_START");
        public final static Property IsUnderLine = new Property(11, String.class, "isUnderLine", false, "IS_UNDER_LINE");
        public final static Property MerchantId = new Property(12, String.class, "merchantId", false, "MERCHANT_ID");
        public final static Property Qdjpname = new Property(13, String.class, "qdjpname", false, "QDJPNAME");
        public final static Property SceneEnd = new Property(14, long.class, "sceneEnd", false, "SCENE_END");
        public final static Property SceneStart = new Property(15, long.class, "sceneStart", false, "SCENE_START");
        public final static Property SellCardEnd = new Property(16, long.class, "sellCardEnd", false, "SELL_CARD_END");
        public final static Property SellCardStart = new Property(17, long.class, "sellCardStart", false, "SELL_CARD_START");
        public final static Property ShengCode = new Property(18, String.class, "shengCode", false, "SHENG_CODE");
        public final static Property ShengName = new Property(19, String.class, "shengName", false, "SHENG_NAME");
        public final static Property ShiCode = new Property(20, String.class, "shiCode", false, "SHI_CODE");
        public final static Property ShiName = new Property(21, String.class, "shiName", false, "SHI_NAME");
        public final static Property Xgsj = new Property(22, long.class, "xgsj", false, "XGSJ");
        public final static Property Xiugairen = new Property(23, String.class, "xiugairen", false, "XIUGAIREN");
        public final static Property Yxjpname = new Property(24, String.class, "yxjpname", false, "YXJPNAME");
    }


    public ActivityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACTIVE\" TEXT," + // 1: active
                "\"ACTIVITY_CODE\" INTEGER NOT NULL ," + // 2: activityCode
                "\"ACTIVITY_ID\" TEXT," + // 3: activityId
                "\"ACTIVITY_NAME\" TEXT," + // 4: activityName
                "\"CHUANGJIANREN\" TEXT," + // 5: chuangjianren
                "\"CJSJ\" INTEGER NOT NULL ," + // 6: cjsj
                "\"COVER_IMAGE_ID\" TEXT," + // 7: coverImageId
                "\"DEL\" TEXT," + // 8: del
                "\"EVENT_END\" INTEGER NOT NULL ," + // 9: eventEnd
                "\"EVENT_START\" INTEGER NOT NULL ," + // 10: eventStart
                "\"IS_UNDER_LINE\" TEXT," + // 11: isUnderLine
                "\"MERCHANT_ID\" TEXT," + // 12: merchantId
                "\"QDJPNAME\" TEXT," + // 13: qdjpname
                "\"SCENE_END\" INTEGER NOT NULL ," + // 14: sceneEnd
                "\"SCENE_START\" INTEGER NOT NULL ," + // 15: sceneStart
                "\"SELL_CARD_END\" INTEGER NOT NULL ," + // 16: sellCardEnd
                "\"SELL_CARD_START\" INTEGER NOT NULL ," + // 17: sellCardStart
                "\"SHENG_CODE\" TEXT," + // 18: shengCode
                "\"SHENG_NAME\" TEXT," + // 19: shengName
                "\"SHI_CODE\" TEXT," + // 20: shiCode
                "\"SHI_NAME\" TEXT," + // 21: shiName
                "\"XGSJ\" INTEGER NOT NULL ," + // 22: xgsj
                "\"XIUGAIREN\" TEXT," + // 23: xiugairen
                "\"YXJPNAME\" TEXT);"); // 24: yxjpname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ActivityBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String active = entity.getActive();
        if (active != null) {
            stmt.bindString(2, active);
        }
        stmt.bindLong(3, entity.getActivityCode());
 
        String activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindString(4, activityId);
        }
 
        String activityName = entity.getActivityName();
        if (activityName != null) {
            stmt.bindString(5, activityName);
        }
 
        String chuangjianren = entity.getChuangjianren();
        if (chuangjianren != null) {
            stmt.bindString(6, chuangjianren);
        }
        stmt.bindLong(7, entity.getCjsj());
 
        String coverImageId = entity.getCoverImageId();
        if (coverImageId != null) {
            stmt.bindString(8, coverImageId);
        }
 
        String del = entity.getDel();
        if (del != null) {
            stmt.bindString(9, del);
        }
        stmt.bindLong(10, entity.getEventEnd());
        stmt.bindLong(11, entity.getEventStart());
 
        String isUnderLine = entity.getIsUnderLine();
        if (isUnderLine != null) {
            stmt.bindString(12, isUnderLine);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(13, merchantId);
        }
 
        String qdjpname = entity.getQdjpname();
        if (qdjpname != null) {
            stmt.bindString(14, qdjpname);
        }
        stmt.bindLong(15, entity.getSceneEnd());
        stmt.bindLong(16, entity.getSceneStart());
        stmt.bindLong(17, entity.getSellCardEnd());
        stmt.bindLong(18, entity.getSellCardStart());
 
        String shengCode = entity.getShengCode();
        if (shengCode != null) {
            stmt.bindString(19, shengCode);
        }
 
        String shengName = entity.getShengName();
        if (shengName != null) {
            stmt.bindString(20, shengName);
        }
 
        String shiCode = entity.getShiCode();
        if (shiCode != null) {
            stmt.bindString(21, shiCode);
        }
 
        String shiName = entity.getShiName();
        if (shiName != null) {
            stmt.bindString(22, shiName);
        }
        stmt.bindLong(23, entity.getXgsj());
 
        String xiugairen = entity.getXiugairen();
        if (xiugairen != null) {
            stmt.bindString(24, xiugairen);
        }
 
        String yxjpname = entity.getYxjpname();
        if (yxjpname != null) {
            stmt.bindString(25, yxjpname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ActivityBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String active = entity.getActive();
        if (active != null) {
            stmt.bindString(2, active);
        }
        stmt.bindLong(3, entity.getActivityCode());
 
        String activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindString(4, activityId);
        }
 
        String activityName = entity.getActivityName();
        if (activityName != null) {
            stmt.bindString(5, activityName);
        }
 
        String chuangjianren = entity.getChuangjianren();
        if (chuangjianren != null) {
            stmt.bindString(6, chuangjianren);
        }
        stmt.bindLong(7, entity.getCjsj());
 
        String coverImageId = entity.getCoverImageId();
        if (coverImageId != null) {
            stmt.bindString(8, coverImageId);
        }
 
        String del = entity.getDel();
        if (del != null) {
            stmt.bindString(9, del);
        }
        stmt.bindLong(10, entity.getEventEnd());
        stmt.bindLong(11, entity.getEventStart());
 
        String isUnderLine = entity.getIsUnderLine();
        if (isUnderLine != null) {
            stmt.bindString(12, isUnderLine);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(13, merchantId);
        }
 
        String qdjpname = entity.getQdjpname();
        if (qdjpname != null) {
            stmt.bindString(14, qdjpname);
        }
        stmt.bindLong(15, entity.getSceneEnd());
        stmt.bindLong(16, entity.getSceneStart());
        stmt.bindLong(17, entity.getSellCardEnd());
        stmt.bindLong(18, entity.getSellCardStart());
 
        String shengCode = entity.getShengCode();
        if (shengCode != null) {
            stmt.bindString(19, shengCode);
        }
 
        String shengName = entity.getShengName();
        if (shengName != null) {
            stmt.bindString(20, shengName);
        }
 
        String shiCode = entity.getShiCode();
        if (shiCode != null) {
            stmt.bindString(21, shiCode);
        }
 
        String shiName = entity.getShiName();
        if (shiName != null) {
            stmt.bindString(22, shiName);
        }
        stmt.bindLong(23, entity.getXgsj());
 
        String xiugairen = entity.getXiugairen();
        if (xiugairen != null) {
            stmt.bindString(24, xiugairen);
        }
 
        String yxjpname = entity.getYxjpname();
        if (yxjpname != null) {
            stmt.bindString(25, yxjpname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ActivityBean readEntity(Cursor cursor, int offset) {
        ActivityBean entity = new ActivityBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // active
            cursor.getInt(offset + 2), // activityCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // activityId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // activityName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chuangjianren
            cursor.getLong(offset + 6), // cjsj
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coverImageId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // del
            cursor.getLong(offset + 9), // eventEnd
            cursor.getLong(offset + 10), // eventStart
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isUnderLine
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // merchantId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // qdjpname
            cursor.getLong(offset + 14), // sceneEnd
            cursor.getLong(offset + 15), // sceneStart
            cursor.getLong(offset + 16), // sellCardEnd
            cursor.getLong(offset + 17), // sellCardStart
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // shengCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // shengName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // shiCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // shiName
            cursor.getLong(offset + 22), // xgsj
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // xiugairen
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // yxjpname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ActivityBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActive(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActivityCode(cursor.getInt(offset + 2));
        entity.setActivityId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActivityName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChuangjianren(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCjsj(cursor.getLong(offset + 6));
        entity.setCoverImageId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEventEnd(cursor.getLong(offset + 9));
        entity.setEventStart(cursor.getLong(offset + 10));
        entity.setIsUnderLine(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMerchantId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQdjpname(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSceneEnd(cursor.getLong(offset + 14));
        entity.setSceneStart(cursor.getLong(offset + 15));
        entity.setSellCardEnd(cursor.getLong(offset + 16));
        entity.setSellCardStart(cursor.getLong(offset + 17));
        entity.setShengCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setShengName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setShiCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setShiName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setXgsj(cursor.getLong(offset + 22));
        entity.setXiugairen(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setYxjpname(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ActivityBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ActivityBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ActivityBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
